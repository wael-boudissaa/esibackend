// generator client {
//   provider = "prisma-client-js"
// }


// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//     relationMode = "prisma"

// }
model page { 
  idPage Int @id @default(autoincrement())
  nomPage String
  hersection heroSection[]
  section section[]

}
model heroSection { 
  idHeroSection Int @id @default(autoincrement())
  idpage Int
  titre String 
  description String
  page page @relation(fields: [idpage], references: [idPage],map:"herSection_page")
  image String
}

model gallerie {
  idGallerie Int @id @default(autoincrement())
  link String?
}

model section { 
  idSection Int @id @default(autoincrement())
  titreSection String
  typeSection String
  description String
  link String 
  image String
  idPage Int
  page page @relation(fields: [idPage], references: [idPage],map:"Section_page")

}

  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
  }
    enum ProfileType {
    club
    responsableEvenement  
    administrator
    dre

  }



  model profile {
    id                    Int                    @id @default(autoincrement())
    email                 String                 @unique(map: "Profile_email_key")
    adresse               String?
    fullname              String?
    phone                 String?
    password              String
    image                 String?
    last_login DateTime?
    refreshToken  String?
    type                  ProfileType
    author              author? 
    // club                club? 
    // dlab                  dlab?
    // dre                   dre?
    // alumni          alumni?
    // partenaire            partenaire?
    // student               student?
  }



  model author {
      idAuthor        Int      @id @default(autoincrement())
      idProfile       Int @unique
      club club?
      dre DRE?
      administrator Administrator?
      responsableEvenenement responsableEvenement?
      evenement evenement[]
      actualite Actualite[]
    profile                 profile     @relation(fields: [idProfile], references: [id], map: "profile_author_fkey")
  }
  model DRE {
    idDre Int @id 
    demandeDevis DemandeDevis_DRE[]
    demandePartenaire DemandePartenaire_DRE[]
      author  author @relation(fields: [idDre], references: [idAuthor], map:"DRE_author_fkey")

  }
  model Administrator {
    idAdministrator Int @id 
    author  author @relation(fields: [idAdministrator], references: [idAuthor], map:"Administrator_author_fkey")
    demandeVisite demandeVisite_Administrator[]
    visite visite []
    actualite Validate_Actualite_Administrator[]

  }
  model responsableEvenement {
    idReseponsableEvenement Int @id 
    author  author @relation(fields: [idReseponsableEvenement], references: [idAuthor], map:"ResponsableEvenement_profile_fkey")
    evenement  Validate_Evenement_ResponsableEvenement[]
    // evenementClub  Validate_Evenement_ResponsableEvenement[]

  }

  model club { 
    idClub Int @id 
    author  author @relation(fields: [idClub], references: [idAuthor], map:"club_profile_fkey")
    // evenementClub evenement[]
  }

  model alumni {
    idAlumni        Int              @id
    demandeEvenementAlumni EvenementAlumni[]
    // evenementAlumni   evenementalumni[]
    alumniJob String 
    alumniQuote String
  }

  // !!!!! ALLL PROFILES TILL NOW 
  model TypeActualite {
    idTypeActualite Int         @id @default(autoincrement())
    actualites      Actualite[] // Use plural form for relation field name
    name            String
  }


 
  //!!! Actualite 
  model Actualite {
    idActualite                    Int             @id @default(autoincrement())
    titre                 String
    description           String?       
    image                 String?               
    date             DateTime?
    file      String?
    idType                Int   
    status            String 
    idAuthor  Int
    author author @relation(fields: [idAuthor], references: [idAuthor], map:"CREATE_AUTHOR_Actualite")    
    Administrator Validate_Actualite_Administrator[]
    typeActualite         TypeActualite   @relation(fields: [idType], references: [idTypeActualite] , map: "typeActualiteActualite")
  }



  model Validate_Actualite_Administrator{
    AdministratorId Int 
    actualiteId Int 
         ValidatedAt            DateTime @default(now())


    actualite Actualite @relation(fields: [actualiteId], references: [idActualite],map:"validation_actualite")
    administrator Administrator @relation(fields: [AdministratorId],references: [idAdministrator],map:"validation_parAdministrator")
      @@id([actualiteId,AdministratorId])

  }
  // model evenementClub {
  //   idEvenementClub                   Int                   @id @default(autoincrement())
  //   clubIden              Int
  //   club                  club                  @relation(fields: [clubIden], references: [idClub], map: "Evenement_clubId_fkey")
  //   responsableEVenement Validate_EvenementClub_ResponsableEvenement[]
  //   titre                 String
  //   description           String?       
  //   image                 String?  
  //   status            String             
  //   date             DateTime?
  // }


  // model Validate_EvenementClub_ResponsableEvenement{
  //   responsableEvenementId Int 
  //   evenementId Int 
  //   ValidatedAt            DateTime @default(now())

  //   evenementClub evenementClub @relation(fields: [evenementId], references: [idEvenementClub],map:"validation_evenementClub")
  //   responsableEvenement responsableEvenement @relation(fields: [responsableEvenementId],references: [idReseponsableEvenement],map:"validationClub_parResponsabl")
  //     @@id([evenementId,responsableEvenementId])

  // }


  //!!! evenement
  model evenement {
    idEvenement                    Int                   @id @default(autoincrement())
    idAuthor Int
    author author @relation(fields: [idAuthor], references: [idAuthor], map:"CREATE_Author_Evenement")    

    responsableEveneemnt Validate_Evenement_ResponsableEvenement[]
    titre                 String
    description           String?       
    image                 String?  
    status            String             
    date             DateTime?
  }

  model Validate_Evenement_ResponsableEvenement{
    responsableEvenementId Int 
    evenementId Int 
         ValidatedAt            DateTime @default(now())

    responsableValidation evenement @relation(fields: [evenementId], references: [idEvenement],map:"validation_evenement")
    responsableEvenement responsableEvenement @relation(fields: [responsableEvenementId],references: [idReseponsableEvenement],map:"validation_parResponsabl")
      @@id([evenementId,responsableEvenementId])

  }


  //!!!! EVENEMENT ALUMNI

  // model evenementalumni {
  //   idEvenementAlumni             Int          @id @default(autoincrement())
  //   idAlumni Int 
  //   titre                 String
  //   description           String?       
  //   image                 String?               
  //   date             DateTime?
  //   alumni   alumni @relation(fields: [idAlumni], references: [idAlumni], map: "evenementAlumni_AlumniId_fkey")
  //   visitor        Inscription[]    
  // }

  //!! VISITOR 



  model visitor {
    idVisitor                 Int                   @id @default(autoincrement())
    email               String                @unique(map: "Visitor_email_key")
    fullname            String
    address               String?
    phone               String
    demandedevis        demandedevis[]
    // demandeemploi       demandeemploi[]
    demandeformateur    demandeformateur[]
    demandepartenaire   demandepartenaire[]
    // demandeprojetfablab demandeprojetfablab[]
    demandevisite       demandevisite[]
    evenementAlumni     Inscription[]     
    ticket              ticket[]
  }

model DemandeDevis_DRE {
  idDemandeDevis Int
  idDRE           Int
  dre             DRE         @relation(fields: [idDRE], references: [idDre], map: "Validation_DRE")
  demandeDevis   demandedevis @relation(fields: [idDemandeDevis], references: [idDemandeDevis], map: "Validation_DemandeDevis")
     ValidatedAt            DateTime @default(now())

  @@id([idDemandeDevis, idDRE])
}

model DemandePartenaire_DRE {
  idDemandePartenaire Int
  idDRE           Int
  dre             DRE         @relation(fields: [idDRE], references: [idDre], map: "DemandePartenaire_DRE")
  demandeDevis   demandepartenaire @relation(fields: [idDemandePartenaire], references: [idDemandePartenaire], map: "Validation_DemandePartenaire")
     ValidatedAt            DateTime @default(now())

  @@id([idDemandePartenaire, idDRE])
}

  model demandedevis {
    idDemandeDevis        Int     @id @default(autoincrement())
    status    String
    idVisitor Int
    dre DemandeDevis_DRE[]
     createdAt            DateTime @default(now())
    visitor   visitor @relation(fields: [idVisitor], references: [idVisitor], map: "demandeDevis_visitorId_fkey")

  }
 model Inscription {
  visitor visitor @relation(fields: [visitorId] , references: [idVisitor])
  visitorId Int 
  evenementAlumni EvenementAlumni @relation(fields: [evenementAlumniId] , references: [idEvenementAlumni],map:"Inscription_Evenement")
  evenementAlumniId Int 

  @@id([visitorId,evenementAlumniId])
 }

  model EvenementAlumni {
   idEvenementAlumni        Int     @id @default(autoincrement())
    status    String
    idAlumni Int
     titre                 String
    description           String?       
    image                 String?               
    date             DateTime?
    visitor        Inscription[]  
    createdAt            DateTime @default(now())
    alumni   alumni @relation(fields: [idAlumni], references: [idAlumni], map: "DemandeEvenementAlumni_Alumni_fkey")
  }





  model demandepartenaire {
    idDemandePartenaire        Int     @id @default(autoincrement())
    status    String
    idVisitor Int
    dre DemandePartenaire_DRE[]
     createdAt            DateTime @default(now())
    visitor   visitor @relation(fields: [idVisitor], references: [idVisitor], map: "demandePartenaire_visitorId_fkey")

  }
  model demandeVisite_Administrator { 
    idDemandeVisite Int 
    idAdministrator Int 
    administrator Administrator @relation(fields: [idAdministrator],references: [idAdministrator],map : "demandeVisite_validate")
    demandeVisite demandevisite @relation(fields: [idDemandeVisite],references: [idDemandeVisite],map : "adminstrator_validate")
      validateAt DateTime @default(now())
    @@id([idAdministrator,idDemandeVisite])
  }

  model demandevisite {
    idDemandeVisite        Int     @id @default(autoincrement())
    status    String
    idVisitor Int
    nomOrganisation String 
    nombreParticipant Int
    raisonVisite String
    administator demandeVisite_Administrator[]
     createdAt            DateTime @default(now())
    visitor   visitor @relation(fields: [idVisitor], references: [idVisitor], map: "DemandeVisite_visitorId_fkey")

  }

  model demandeformateur {
    idDemandeFormateur        Int     @id @default(autoincrement())
    status    String
    idVisitor Int
     createdAt            DateTime @default(now())
    visitor   visitor @relation(fields: [idVisitor], references: [idVisitor], map: "DemandeFormateur_visitorId_fkey")

  }

  model formation {
    idFormation          Int           @id @default(autoincrement())
    idDomaine   Int
    idTheme     Int          
    // evaluation  evaluation[]
    domaine     domaine       @relation(fields: [idDomaine], references: [idDomaine], map: "Formation_domaineId_fkey")
    theme       theme         @relation(fields: [idTheme], references: [idTheme], map: "Formation_themeId_fkey")
    // participant participant[]
    formateur   FormationFormateur[]   
    


  }

  model formateur {
    idFormateur        Int         @id @default(autoincrement())
    formation FormationFormateur[]
  }

 model FormationFormateur {
  formation formation @relation(fields: [formationId] , references: [idFormation])
  formationId Int 
  formateur formateur @relation(fields: [formateurId] , references: [idFormateur])
  formateurId Int 

  @@id([formateurId,formationId])
 }
  model theme {
    idTheme        Int        @id @default(autoincrement())
    nomTheme  String
    description String 
    idDomaine Int
    domaine domaine @relation(fields: [idDomaine],references: [idDomaine] , map:"Theme_Domaine_fkey")
    formation formation[]
  }

  model domaine {
    idDomaine         Int         @id @default(autoincrement())
    nomDomaine String
    theme     theme[]
    formation  formation[]
  }


  //!!!! Ticket COntact 


  model ticket {
    idTicket      Int       @id @default(autoincrement())
    title   String
    message message[]
    idVisitor Int
    visitor   visitor @relation(fields: [idVisitor], references: [idVisitor], map: "Ticket_visitorId_fkey")

  }


  model message {
    idMessage       Int    @id @default(autoincrement())
    message  String
    idTicket Int
    ticket   ticket @relation(fields: [idTicket], references: [idTicket], map: "Message_ticketId_fkey")

  }

model visite  {
  idVisite Int @id @default(autoincrement())
  dateVisite DateTime 
  idAdministrator Int 
  status String 
  capacite Int
  administrator Administrator @relation(fields: [idAdministrator], references: [idAdministrator], map:"VisiteAdministrator")
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

